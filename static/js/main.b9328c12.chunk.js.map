{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","onClick","PokemonInfo","base","Object","keys","map","key","App","React","useState","filter","filterset","selectedItem","selectedItemSet","style","margin","width","paddingTop","className","value","onChange","evt","target","display","gridTemplateColumns","gridColumnGap","toLocaleLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAIMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACjB,+BACA,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BAAI,wBACJC,QAAS,kBAAML,EAASD,IADpB,2BAgBAO,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OAClB,gCACE,6BAAKN,EAAKC,UACV,gCACA,gCAEIM,OAAOC,KAAKF,GAAMG,KAAI,SAAAC,GAAG,OACvB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,cA2EJC,MAnDf,WAAgB,IAAD,EAEcC,IAAMC,SAAS,IAF7B,mBAEPC,EAFO,KAECC,EAFD,OAG0BH,IAAMC,SAAS,IAHzC,mBAGPG,EAHO,KAGOC,EAHP,KAIb,OACE,sBAAMC,MAAQ,CACTC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAHjB,UAKE,oBAAIC,UAAU,QAAd,4BACA,uBACEC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAASV,EAAUU,EAAIC,OAAOH,UAE3C,qBACAL,MAAO,CACLS,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJjB,SAOA,wBAAOT,MAAM,OAAb,UACC,gCACE,+BACE,sCACA,sCACA,6CAGF,gCACGtB,EACAgB,QAAO,SAAChB,GAAD,OACPA,EAAQE,KAAKC,QAAQ6B,oBAAoBC,SAASjB,MAClDkB,MAAM,EAAE,IAAIvB,KAAI,SAAAX,GAAO,OACtB,cAAC,EAAD,CACIA,QAAWA,EAEXC,SAAW,SAACD,GAAD,OAAamB,EAAgBnB,KADjCA,EAAQmC,cAOxBjB,GAAkB,cAAC,EAAD,eAAkBA,QCvF5BkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b9328c12.chunk.js","sourcesContent":["import './App.css';\nimport pokemon from \"./pokeman.json\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n  <td>{pokemon.name.english}</td>\n  <td>{pokemon.type.join(\", \")}</td>\n  <td><button\n  onClick={() => onSelect(pokemon)}\n    >Seelct!</button></td>\n  </tr>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string.isRequired\n    }),\n    type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }),\n  onSelect: PropTypes.func.isRequired,\n};\n\nconst PokemonInfo = ({ name, base}) => (\n  <div>\n    <h1>{name.english}</h1>\n    <table>\n    <tbody>\n      {\n        Object.keys(base).map(key => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>\n        ))\n      }\n      </tbody>\n    </table>\n  </div>\n) \n\nPokemonInfo.propTypes = {\n  name: PropTypes.shape({\n\n  }),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp, Attack\": PropTypes.number.isRequired,\n    \"Sp, Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  })\n}\nfunction App() { \n\n  const[filter, filterset] = React.useState(\"\");\n  const[selectedItem, selectedItemSet] = React.useState(\"\");\n  return (\n    <div  style ={{\n         margin: \"auto\", \n         width: 800,\n         paddingTop: \"1rem\"\n         }}>\n      <h1 className=\"title\">Pokeman Search</h1>\n      <input \n        value={filter}\n        onChange={(evt) => filterset(evt.target.value)}\n      />\n     <div\n     style={{\n       display: 'grid',\n       gridTemplateColumns: '70% 30%',\n       gridColumnGap: \"1rem\",\n     }}\n     >\n     <table width=\"100%\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n          <th>Select</th>\n        </tr>\n        </thead>\n        <tbody>\n          {pokemon\n          .filter((pokemon) =>\n           pokemon.name.english.toLocaleLowerCase().includes(filter))\n          .slice(0,20).map(pokemon => (\n            <PokemonRow \n                pokemon = {pokemon} \n                key = {pokemon.id}  \n                onSelect ={(pokemon) => selectedItemSet(pokemon) }>\n            </PokemonRow>\n          ))}\n        </tbody>\n      </table>\n      </div>\n      {selectedItem && ( <PokemonInfo { ...selectedItem }></PokemonInfo>\n       \n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}